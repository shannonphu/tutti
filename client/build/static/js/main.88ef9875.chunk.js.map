{"version":3,"sources":["assets/transparent_lick.png","config/index.js","assets/kevin_bossa.mp3","utils/stateEnums.js","utils/httpHelper.js","actions/user.js","api/endpoints.js","actions/room.js","actions/GameActions.js","components/Main/MainTheme.js","components/Main/Main.jsx","components/App.js","components/Nav/Nav.jsx","components/Nav/NavStyles.js","components/Container/Container.jsx","utils/roomUtils.js","components/LandingPage/LandingPage.jsx","components/LandingPage/LandingPageStyles.js","components/DummyChat/DummyChat.jsx","components/DummyPost/DummyPost.jsx","components/RoomPageContainer/RoomPageContainer.jsx","components/RoomInfoPanel/RoomInfoPanel.jsx","components/RoomInfoPanel/RoomInfoPanelStyles.js","components/PlayerAvatar/PlayerAvatar.jsx","components/PlayerAvatar/PlayerAvatarStyles.js","components/ChatMessageBox/ChatMessageBox.jsx","components/ChatMessageBox/ChatMessageBoxStyles.js","components/GamePortalContainer/GamePortalContainer.jsx","components/GameInfoTable/GameInfoTable.jsx","components/Metronome/Metronome.jsx","components/Microphone/Microphone.jsx","components/AudioDisplayTable/AudioDisplayTable.jsx","components/AudioDisplayTable/AudioDisplayTableStyles.js","components/Looper/SampleLooper.jsx","components/Looper/Looper.jsx","components/Looper/UserRecorder.jsx","components/AudioWaveform/Player.js","components/AudioWaveform/AudioWaveform.jsx","components/GameStageDisplay/GameStageStepIcon/GameStageStepIcon.jsx","components/GameStageDisplay/GameStageStepIcon/GameStageStepIconStyles.js","components/GameStageDisplay/GameStageStepConnector/GameStageStepConnector.js","components/GameStageDisplay/GameStageDisplay.jsx","components/GameStageDisplay/GameStageDisplayStyles.js","utils/GameModel.js","components/TuttiContainer/TuttiContainer.jsx","components/TuttiContainer/TuttiContainerStyles.js","components/VolumeSlider/VolumeSlider.jsx","components/VolumeSlider/VolumeSliderStyles.js","components/RecordingSpinIcon/RecordingSpinIcon.jsx","components/RecordingSpinIcon/RecordingSpinIconStyles.js","reducers/user.js","reducers/room.js","reducers/GameReducer.js","reducers/index.js","store.js","index.js","assets/woodblock.wav"],"names":["module","exports","server","host","port","client","internalHost","externalHost","ROOM_STATE","Object","freeze","EMPTY","INVALID","VALID","GAME_STAGE","WAITING_FOR_PLAYERS","WAITING_TO_START","BASELINE_PLAYER_RECORDING","OTHER_PLAYERS_LISTENING_TO_BASELINE","OTHER_PLAYERS_RECORDING","FINAL_RECORDING_DONE","get","url","axios","then","response","data","catch","error","Promise","reject","post","requestBody","getUsername","cb","dispatch","prevState","type","name","console","editUsername","api","sentMessageToRoom","message","playerName","user","roomCode","room","pingHello","text","getRoom","bpm","numBars","numLoops","users","addRoom","updateRoomBpmSettings","updateRoomNumBarsSettings","updateRoomNumLoopsSettings","addUserToRoom","uploadAudio","audioData","uploadLoopedAudio","broadcastRecordingState","isRecording","advanceToNextGameStage","setBaselinePlayer","theme","createMuiTheme","palette","primary","extraLight","light","main","dark","landing","secondary","contrastThreshold","tonalOffset","Main","ThemeProvider","path","component","props","render","Component","App","withRouter","connect","state","log","JSON","stringify","chat","game","bindActionCreators","actionCreators","Nav","classes","this","AppBar","position","className","root","Toolbar","variant","IconButton","edge","color","aria-label","Typography","to","title","slider","withStyles","backgroundColor","fontFamily","fontWeight","fontSize","contrastText","textDecoration","right","Container","isRoomCodeSet","LandingPage","isError","handleJoinRoom","bind","handleCreateRoom","handleTextChange","buttonGenerator","event","preventDefault","length","setState","defaultRoom","history","push","target","value","Button","onClick","Grid","container","CssBaseline","item","xs","sm","md","Paper","square","spacing","direction","alignItems","justify","onSubmit","TextField","autoFocus","onChange","margin","id","label","autoComplete","helperText","fullWidth","image","flexGrow","marginTop","backgroundImage","theLick","backgroundRepeat","backgroundSize","backgroundPosition","paper","flexDirection","minHeight","DummyChat","submitHandler","refs","addMessage","placeholder","ref","messages","map","index","key","DummyPost","handleTextFieldChange","e","RoomPageContainer","fixed","RoomInfoPanel","getExternalRoomUrl","config","roomRoot","gutterBottom","link","navigator","clipboard","writeText","playerGrid","GridList","cellHeight","cols","entries","player","GridListTile","gridListTile","Chip","avatar","Avatar","charAt","toUpperCase","padding","textAlign","PlayerAvatar","purple","medium","display","getContrastText","deepPurple","small","width","height","large","ChatMessageBox","currMessage","chatContainer","isTyping","hasInputField","showSenderName","bubblesCentered","maxHeight","chatFeed","InputProps","bubbleStyles","chatbubble","borderRadius","lastUpdatedField","style","withTheme","GamePortalContainer","isLoaded","isUserPlayerSet","isClickTrack","isLoopPlayerSet","isAllUserPlayerSet","createMetronome","createClickTrack","createLoopPlayer","createAllUserPlayer","handleRecordLoop","handleRecordOverLoop","handlePlaybackMerged","handleToggleClickTrack","startMicrophonePermissions","stopMicrophoneAccess","startRecording","stopRecording","stopRecordingLoop","saveAudio","saveLoopedAudio","Tone","context","latencyHint","Transport","Buffer","on","toneNumBars","Time","toneTotalBars","loopPlayer","userPlayers","allUserPlayer","metronome","clickTrack","startRecordEvent","Event","stopRecordEvent","stopRecordLoopEvent","metronomeSynth","MembraneSynth","toMaster","Loop","time","triggerAttackRelease","woodBlock","Player","woodBlockUrl","volume","start","baselinePlayer","baselinePlayerName","playerData","loopUrl","fadeOut","duration","loop","loopStart","loopEnd","availableAudio","events","keys","i","audioUrl","Players","Part","values","mediaDevices","getUserMedia","audio","stream","window","streamReference","hasAccessToMicrophone","mediaRecorder","MediaRecorder","ondataavailable","size","chunks","getAudioTracks","forEach","track","stop","blob","Blob","audioURL","URL","createObjectURL","blobData","blobUri","mute","cancel","ButtonGroup","orientation","startIcon","disabled","GameInfoTable","restructureData","handleSubmit","parseInt","stage","TableContainer","Table","TableBody","TableRow","TableCell","colSpan","row","scope","align","endIcon","Metronome","isOn","handleClick","Volume","synth","chain","Master","Microphone","mic","UserMedia","open","close","toSeconds","setTimeout","AudioDisplayTable","playSelectedAudio","stopSelectedAudio","playMergedAudio","getPlayerList","shouldPanelBeFixed","handlePanelChange","initExpand","isPlayingMerged","isPlayingSingle","panelWidth","isExpanded","sequence","onload","Sequence","note","p","sync","computedStyle","getComputedStyle","expansionPanel","clientWidth","parseFloat","paddingLeft","paddingRight","playerList","currPlayer","unshift","newIsExpanded","ExpansionPanel","expanded","ExpansionPanelSummary","expandIcon","undefined","ExpansionPanelDetails","audioName","shouldShowControls","audioBuffer","externalPlayer","eventEmitter","init","connectSeries","emit","scheduleRepeat","getCurrentTime","getDuration","destroy","dispose","play","now","pause","isPlaying","seek","seconds","isSeeking","buffer","AudioWaveform","peaks","AudioContext","webkitAudioContext","audioContext","_component","fetch","Response","arrayBuffer","decodeAudioData","options","containers","overview","overviewWaveformColor","webAudio","scale","multiChannel","keyboard","showPlayheadTime","zoomLevels","Peaks","err","peaksInstance","borderColor","circle","completed","zIndex","active","clsx","GameStageStepConnector","alternativeLabel","top","left","line","borderTopWidth","StepConnector","GameStageDisplay","steps","activeStep","Stepper","connector","stageRoot","Step","StepLabel","StepIconComponent","GameStageStepIcon","border","grey","Game","Progression","indexOf","TuttiContainer","getGameSteps","match","params","roomId","roomProgression","roomState","Backdrop","CircularProgress","isUserCreated","getCurrentGameStepIndex","paddingTop","VolumeSlider","handleChange","newValue","newValueDecibels","volumeIcon","sliderGrid","Slider","RecordingSpinIcon","fill","progress","UserReducer","action","senderName","RoomReducer","GameReducer","GameModel","NextStage","rootReducer","combineReducers","socket","io","socketIoMiddleware","createSocketIoMiddleware","store","createStore","applyMiddleware","thunk","createBrowserHistory","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.88ef9875.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transparent_lick.8864ee61.png\";","module.exports = (() => {\n    switch (process.env.NODE_ENV) {\n    case 'development':\n    default:\n        return {\n            // Server settings\n            server: {\n                host: 'localhost',\n                port: 8080\n            },\n            client: {\n                internalHost: 'localhost',\n                externalHost: 'tut.ti',\n                port: 3000\n            }\n        };\n    }\n})();","module.exports = __webpack_public_path__ + \"static/media/kevin_bossa.83c3770d.mp3\";","module.exports = {\n    ROOM_STATE: Object.freeze({\n        EMPTY: 'EMPTY', \n        INVALID: 'INVALID', \n        VALID: 'VALID'\n    }),\n    GAME_STAGE: Object.freeze({\n        WAITING_FOR_PLAYERS: 'Waiting for players',\n        WAITING_TO_START: 'Start game',\n        BASELINE_PLAYER_RECORDING: 'First player recording',\n        OTHER_PLAYERS_LISTENING_TO_BASELINE: 'Review first recording',\n        OTHER_PLAYERS_RECORDING: 'Everyone else records',\n        FINAL_RECORDING_DONE: 'Review final recording'\n    })\n}","import axios from 'axios';\n\n/**\n * make a get request\n * @param {string} URL\n * @returns {Promise}\n */\nexport function get(url) {\n    return axios.get(url)\n        .then(response => response.data)\n        .catch((error) => Promise.reject(`GET ${url} failed: ${error}`));\n}\n\n/**\n * make a get request\n * @param {string} URL\n * @param {Object} request body\n * @returns {Promise}\n */\nexport function post(url, requestBody) {\n    return axios.post(url, requestBody)\n        .then(response => response.data)\n        .catch((error) => Promise.reject(`POST ${url} failed: ${error}`));\n}","import * as api from '../api/endpoints';\n\n/**\n * @description Calls the API method to get username and update store\n */\nexport function getUsername(cb) {\n    return (dispatch, prevState) => {\n        api.getUsername()\n            .then(response => dispatch({ type: 'GET_USER_NAME', name: response.data }))\n            .then(() => { if (cb) cb(); })\n            .catch(error => console.error('Error in getUsername: ' + error));\n    };\n}\n\nexport function editUsername(name, cb) {\n    return (dispatch, prevState) => {\n        api.editUsername(name)\n            .then(response => dispatch({ type: 'GET_USER_NAME', name: response.data }))\n            .then(() => { if (cb) cb(); })\n            .catch(error => console.error('Error in addUsername: ' + error));\n    };\n}\n\nexport function sentMessageToRoom(message) {\n    return (dispatch, prevState) => {\n        const { user: { playerName }, room: { roomCode } } = prevState();\n\n        dispatch({ type: 'CHAT_MESSAGE_SENT' });\n        dispatch({ type: 'socket/MESSAGE', playerName, message, roomCode });\n    };\n}\n\nexport function pingHello(text) {\n    return (dispatch, prevState) => {\n        dispatch({ type: 'socket/HELLO', data: text });\n    };\n}","import { get, post } from '../utils/httpHelper';\n\n/**\n * @description Makes server request for username\n * @returns {JSON} username in JSON format\n */\nexport function getUsername() {\n    return get(`/api/user/name`);\n}\n\nexport function editUsername(name) {\n    return post(`/api/user/name/edit`, {\n        name\n    });\n}\n\nexport function getRoom(roomCode) {\n    return get(`/api/room/${roomCode}`);\n}\n\nexport function addUserToRoom(user, roomCode) {\n    return post(`/api/room/${roomCode}/user/new`, user);\n}\n\nexport function addRoom(bpm, numBars, numLoops, user) {\n    return post(`/api/room/new`, {\n        bpm, \n        numBars, \n        numLoops,\n        user\n    });\n}","/* eslint-disable no-unused-vars */\nimport * as api from '../api/endpoints';\n\nexport function getRoom(roomCode, cb) {\n    return (dispatch, prevState) => {\n        api.getRoom(roomCode)\n            .then((response) => {\n                if (response.data == null) {\n                    console.error('Room code does not exist.');\n                    dispatch({\n                        type: 'SET_INVALID_ROOM',\n                        roomCode: null\n                    });\n                    return null;\n                } else {\n                    dispatch({\n                        type: 'LOAD_ROOM',\n                        roomCode: response.data.roomCode,\n                        bpm: response.data.bpm,\n                        numBars: response.data.numBars,\n                        numLoops: response.data.numLoops,\n                        users: response.data.users\n                    });\n                    return response;\n                }\n            })\n            .then((response) => { if (cb) cb(response); })\n            .catch(error => console.error('Error in getRoom: ' + error));\n    };\n}\n\nexport function addRoom(bpm, numBars, numLoops, user, cb) {\n    return (dispatch, prevState) => {\n        api.addRoom(bpm, numBars, numLoops, user)\n            .then((response) => {\n                dispatch({ \n                    type: 'LOAD_ROOM',\n                    roomCode: response.data,\n                    bpm, \n                    numBars, \n                    numLoops,\n                    users: { [user.playerName]: { ...user } }\n                });\n                dispatch({\n                    type: 'ADD_USER',\n                    playerName: user.playerName\n                });\n                dispatch({ type: 'socket/JOIN_ROOM', user, roomCode: response.data });\n                return response;\n            })\n            .then((response) => { if (cb) cb(response); })\n            .catch(error => console.error('Error in addRoom: ' + error));\n    };\n}\n\nexport function updateRoomBpmSettings(bpm) {\n    return (dispatch, prevState) => {\n        // Update this client's state\n        dispatch({ type: 'EDIT_ROOM_BPM', bpm });\n        // Emit action to socket API\n        const { room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/EDIT_ROOM_BPM', roomCode, bpm });\n    };\n}\n\nexport function updateRoomNumBarsSettings(numBars) {\n    return (dispatch, prevState) => {\n        dispatch({ type: 'EDIT_ROOM_NUM_BARS', numBars });\n        // Emit action to socket API\n        const { room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/EDIT_ROOM_NUM_BARS', roomCode, numBars });\n    };\n}\n\nexport function updateRoomNumLoopsSettings(numLoops) {\n    return (dispatch, prevState) => {\n        dispatch({ type: 'EDIT_ROOM_NUM_LOOPS', numLoops });\n        // Emit action to socket API\n        const { room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/EDIT_ROOM_NUM_LOOPS', roomCode, numLoops });\n    };\n}\n\nexport function addUserToRoom(user, cb) {\n    return (dispatch, prevState) => {\n        const { room: { roomCode } } = prevState();\n\n        api.addUserToRoom(user, roomCode)\n            .then((response) => {\n                dispatch({\n                    type: 'ADD_USER',\n                    playerName: user.playerName\n                });\n                dispatch({ type: 'socket/JOIN_ROOM', user, roomCode });\n                return response;\n            })\n            .then((response) => { if (cb) cb(response); })\n            .catch(error => console.error('Error in addUserToRoom: ' + error));\n    };\n}\n\nexport function uploadAudio(audioData) {\n    return (dispatch, prevState) => {\n        const { user: { playerName }, room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/UPLOAD_AUDIO', playerName, roomCode, audioData });\n    };\n}\n\nexport function uploadLoopedAudio(audioData) {\n    return (dispatch, prevState) => {\n        const { user: { playerName }, room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/UPLOAD_LOOPED_AUDIO', playerName, roomCode, audioData });\n    };\n}\n\n// Example call: this.props.broadcastRecordingState(true)\nexport function broadcastRecordingState(isRecording) {\n    return (dispatch, prevState) => {\n        const { user: { playerName }, room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/PLAYER_UPDATED_RECORDING_STATE', playerName, roomCode, isRecording });\n        dispatch({ type: 'UPDATED_RECORDING_STATE', isRecording });\n    };\n}","export function advanceToNextGameStage() {\n    return (dispatch, prevState) => {\n        // Broadcast to everyone else\n        const { room: { roomCode } } = prevState();\n        dispatch({ type: 'socket/ADVANCE_GAME_NEXT_STAGE', roomCode });\n    };\n}\n\nexport function setBaselinePlayer() {\n    return (dispatch, prevState) => {\n        const { room: { roomCode }, user } = prevState();\n        dispatch({ type: 'socket/SET_BASELINE_PLAYER', roomCode, user });\n    };\n}","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            extraLight: '#8db8b3',\n            light: '#588984',\n            main: '#4C7C78',\n            dark: '#2F6B66',\n            // contrastText: will be calculated to contrast with palette.primary.main\n            landing: '#282B2B'\n        },\n        secondary: {\n            // light: '#F5F1E3',\n            main: '#4F518C',\n            // dark: will be calculated from palette.secondary.main,\n            // contrastText: '#DE483F',\n        },\n        error: {\n            main: '#a83232'\n        },\n        // Used by `getContrastText()` to maximize the contrast between\n        // the background and the text.\n        contrastThreshold: 3,\n        // Used by the functions below to shift a color's luminance by approximately\n        // two indexes within its tonal palette.\n        // E.g., shift from Red 500 to Red 300 or Red 700.\n        tonalOffset: 0.2,\n    }\n});\n\nexport default theme;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Nav, Container, LandingPage, TuttiContainer } from '..';\nimport theme from './MainTheme';\n\nclass Main extends Component {\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <Nav />\n\n                {/*Alternate pages beneath navbar, based on current route*/}\n                <Switch>\n                    <Route path=\"/room/:roomId?\" component={(props) => <TuttiContainer {...this.props} {...props} />} />\n                    <Route path='/test' render={() => <Container {...this.props} />} />                    \n                    <Route path='/' render={() => <LandingPage {...this.props} />} />                    \n                </Switch>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default Main;","/**\n * The App component wraps the Main component and the Redux library\n * to bind the action creators and datastore to properties in the component\n */\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport * as actionCreators from '../actions';\nimport Main from './Main/Main';\n\n// These are the properties we'll automatically pass to Main\nfunction mapStateToProps(state) {\n    console.log('Redux Store: ' + JSON.stringify(state));\n    return {\n        user      : state.user,\n        chat      : state.chat,\n        room      : state.room,\n        game      : state.game\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(actionCreators, dispatch);\n}\n\nconst App = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main));\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport { VolumeSlider } from '..';\nimport styles from './NavStyles';\n\nclass Nav extends Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <AppBar position='sticky' className={classes.root}>\n                <Toolbar variant='dense'>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <MusicNoteIcon />\n                    </IconButton>\n                    <Typography variant='h6' color='inherit'>\n                        <Link to='/' className={classes.title}>tut.ti</Link>\n                    </Typography>\n                    <div className={classes.slider}><VolumeSlider {...this.props} /></div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}\n\nNav.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Nav);","export default (theme) => ({\n    root: {\n        backgroundColor: theme.palette.primary.dark\n    },\n    title: {\n        fontFamily: 'Parisienne',\n        fontWeight: 700,\n        fontSize: 28,\n        color: theme.palette.primary.contrastText,\n        textDecoration: 'none'\n    },\n    slider: {\n        position: 'absolute',\n        right: 0\n    }\n});","import React, { Component } from 'react';\nimport { DummyPost, DummyChat } from '..';\n\nclass Container extends Component {\n    render() {\n        return (\n            <div>\n                <DummyPost {...this.props} />\n                <hr />\n                <DummyChat {...this.props} />\n            </div>\n        );\n    }\n}\n\nexport default Container;","export function isRoomCodeSet(props) {\n    let isRoomCodeSet = props.room.roomCode !== null;\n    return isRoomCodeSet;\n}\n\nexport function isUserCreated(props) {\n    let user = props.user;\n    let isUserCreated =  \n        (user != null)\n        && (user !== undefined)\n        && (user.playerName != null) \n        && (user.playerName !== undefined);\n    return (isUserCreated);\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { TextField } from '@material-ui/core';\nimport { isRoomCodeSet } from'../../utils/roomUtils.js';\nimport styles from './LandingPageStyles';\n\nclass LandingPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerName : '',\n            isError    : false\n        };\n\n        this.handleJoinRoom   = this.handleJoinRoom.bind(this);\n        this.handleCreateRoom = this.handleCreateRoom.bind(this);\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.buttonGenerator  = this.buttonGenerator.bind(this);\n\n    }\n\n    handleJoinRoom(event) {\n        event.preventDefault(); \n        if (this.state.playerName.length < 1) {\n            this.setState({\n                isError: true\n            });\n            return;\n        }\n\n        let user = { playerName: this.state.playerName };\n        this.props.addUserToRoom(user);\n    }\n\n    handleCreateRoom(event) {\n        event.preventDefault();\n        if (this.state.playerName.length < 1) {\n            this.setState({\n                isError: true\n            });\n            return;\n        }\n\n        let user = { playerName: this.state.playerName };\n        let defaultRoom = this.props.room;\n\n        this.props.addRoom(defaultRoom.bpm, defaultRoom.numBars, defaultRoom.numLoops, user, (room) => {\n            this.props.history.push(`/room/${room.data}`);\n        });\n    }\n\n    handleTextChange(event) {\n        this.setState({\n            playerName: event.target.value,\n            isError   : false\n        });\n    }\n\n    buttonGenerator() {\n        var button;\n        if (isRoomCodeSet(this.props)) {\n            button = \n                <Button\n                    onClick = {this.handleJoinRoom}\n                    variant = 'outlined'\n                >\n                    Join Room\n                </Button>;\n        }\n        else {\n            button =\n                <Button\n                    onClick = {this.handleCreateRoom}\n                    variant = 'outlined'\n                >\n                    Create Room\n                </Button>;\n        }\n        return button;\n    }\n\n    render() {\n        const { classes } = this.props; // paradigm for styling\n\n        return (\n            <Grid container\n                component = \"main\"\n                className = {classes.root}\n            > \n                <CssBaseline/>\n\n                <Grid item \n                    xs        = {12}\n                    sm        = {8}\n                    md        = {5}\n                    component = {Paper}\n                    variant   = \"outlined\"\n                    square\n                >\n                    <Grid container\n                        spacing    = {2}\n                        direction  = \"column\"\n                        alignItems = \"center\"\n                        justify    = \"center\"\n                        className  = {classes.container}\n                    >\n                        <Grid item>\n                            <form onSubmit={isRoomCodeSet(this.props) ? this.handleJoinRoom : this.handleCreateRoom}>    \n                                <TextField\n                                    autoFocus\n                                    onChange     = {this.handleTextChange}\n                                    variant      = \"outlined\"\n                                    margin       = \"normal\"\n                                    id           = \"name\"\n                                    label        = \"Name\"\n                                    autoComplete = \"off\"\n                                    error        = {this.state.isError}\n                                    helperText   = {this.state.isError ? 'pls' : ''}\n                                    fullWidth\n                                    autoFocus\n                                />\n                            </form>\n                        </Grid>\n                        <Grid item>\n                            {this.buttonGenerator()}\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item \n                    xs = {false} \n                    sm = {4} \n                    md = {7} \n                    className = {classes.image} \n                />\n            </Grid> // Grid container main\n        ); // return    \n    } // render\n}\n\nLandingPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(LandingPage);","import theLick from '../../assets/transparent_lick.png';\n\nexport default (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: -20\n    },\n    image: {\n        backgroundImage: `url(${theLick})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: '90%',\n        backgroundColor: theme.palette.primary.landing,\n        backgroundPosition: 'center center',\n    },\n    paper: {\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    container: {\n        minHeight: '95vh',\n\n    }\n});","import React, { Component } from 'react';\n\nclass DummyChat extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    submitHandler(event) {\n        event.preventDefault();\n        let text = this.refs.text.value;\n        const name = 'Shannon'\n        this.props.addMessage(name, text);\n        this.refs.text.value = null;\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>DummyChat</h3>\n                <p>This is an example of socket.io. All clients will receive whatever was input.</p>\n                <form onSubmit={this.submitHandler}>\n                    <div><input type=\"text\" placeholder=\"Type your message...\" ref=\"text\" /></div>\n                    <div><button type=\"submit\" name=\"action\">Submit</button></div>\n                </form>\n                <div>\n                    {this.props.chat.messages.map((data, index) => <li key={index}>{data.message}</li>)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DummyChat;","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass DummyPost extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: ''\n        };\n        this.submitHandler = this.submitHandler.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        props.getUsername();\n    }\n\n    handleTextFieldChange(e) {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    }\n\n    submitHandler(event) {\n        event.preventDefault();\n        if (this.state.name.length > 0) {\n            this.props.editUsername(this.state.name);\n            this.setState({\n                name: ''\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>DummyPost</h3>\n                <p>This is an example of a normal GET/POST request</p>\n                <div>This text will update to whatever was input below: {this.props.user.name}</div>\n                <form onSubmit={this.submitHandler}>\n                    <div>\n                        <TextField ref=\"name\" id=\"name\" label=\"Name\" value={this.state.name} onChange={this.handleTextFieldChange} />\n                    </div>\n                    <div>\n                        <Button variant=\"contained\" label=\"Submit\" type=\"submit\">Submit</Button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default DummyPost;","/* eslint-disable indent */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { RoomInfoPanel, ChatMessageBox, GameInfoTable } from '..';\n\nclass RoomPageContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <Container fixed>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={4}><GameInfoTable {...this.props} /></Grid>\n                        <Grid item xs={12} md={4}><RoomInfoPanel {...this.props} /></Grid>\n                        <Grid item xs={12} md={4}><ChatMessageBox {...this.props} /></Grid>\n                    </Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default RoomPageContainer;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Typography from '@material-ui/core/Typography';\n\nimport config from '../../config';\nimport styles from './RoomInfoPanelStyles';\n\nclass RoomInfoPanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.getExternalRoomUrl = this.getExternalRoomUrl.bind(this);\n    }\n\n    getExternalRoomUrl() {\n        return `https://${config.client.externalHost}/room/${this.props.room.roomCode}`;\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Paper className={classes.roomRoot}>\n                <Typography variant='h5' gutterBottom>\n                    Your room:\n                </Typography>\n                <Grid container alignItems='center'>\n                    <Grid item xs={10}>\n                        <Link to={`/room/${this.props.room.roomCode}`} className={classes.link}>{this.getExternalRoomUrl()}</Link>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <IconButton color='primary' aria-label='copy' onClick={() => { navigator.clipboard.writeText(`http://localhost:3000/room/${this.props.room.roomCode}`) }}>\n                            <FileCopyIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n                <div className={classes.playerGrid}>\n                    <Typography variant='h5' gutterBottom>\n                        Players:\n                </Typography>\n                    <GridList cellHeight={40} cols={3}>\n                        {Object.entries(this.props.room.users).map(([player, data]) =>\n                            <GridListTile key={player} cols={1} className={classes.gridListTile}>\n                                <Chip color='primary' variant='outlined' avatar={<Avatar>{player.charAt(0).toUpperCase()}</Avatar>} label={player} />\n                            </GridListTile>\n                        )}\n                    </GridList>\n                </div>\n            </Paper>\n        )\n    }\n}\n\nRoomInfoPanel.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(RoomInfoPanel);","export default (theme) => ({\n    root: {},\n    roomRoot: {\n        padding: 16,\n        minHeight: 350\n    },\n    link: {\n        color: theme.palette.primary.dark\n    },\n    playerGrid: {\n        marginTop: 20\n    },\n    gridListTile: {\n        textAlign: 'center'\n    }\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport styles from './PlayerAvatarStyles';\n\nclass PlayerAvatar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const { classes } = this.props;\n        return(\n            <div className={classes.root}>\n                <Avatar className={`${classes.purple} ${classes.medium}`}>{this.props.name.charAt(0).toUpperCase()}</Avatar>\n            </div>\n        )\n    }\n}\n\nPlayerAvatar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PlayerAvatar);","import { deepPurple } from '@material-ui/core/colors';\n\nexport default (theme) => ({\n    root: {\n        display: 'flex',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    purple: {\n        color: theme.palette.getContrastText(deepPurple[500]),\n        backgroundColor: deepPurple[500],\n    },\n    small: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n    },\n    medium: {\n        width: theme.spacing(5),\n        height: theme.spacing(5),\n    },\n    large: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    }\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Paper, TextField, IconButton } from '@material-ui/core';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\nimport { ChatFeed } from 'react-chat-ui';\nimport styles from './ChatMessageBoxStyles';\nimport './ChatMessageBoxStyles.css'\n\nclass ChatMessageBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currMessage: ''\n        };\n        this.submitHandler = this.submitHandler.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n    }\n\n    handleTextFieldChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    submitHandler(event) {\n        event.preventDefault();\n        if (this.state.currMessage.length > 0) {\n            this.props.sentMessageToRoom(this.state.currMessage);\n        }\n    }\n\n    render() {\n        const { classes, theme } = this.props;\n\n        return (\n            <Paper>\n                <div className={classes.chatContainer}>\n                    <ChatFeed\n                        messages={this.props.user.messages}\n                        isTyping={false}\n                        hasInputField={false}\n                        showSenderName\n                        bubblesCentered={false}\n                        maxHeight={250}\n                        className={classes.chatFeed}\n                        InputProps\n                        bubbleStyles={\n                            {\n                                text: {\n                                    fontSize: 16\n                                },\n                                chatbubble: {\n                                    backgroundColor: theme.palette.primary.light,\n                                    borderRadius: 30,\n                                    padding: '12px 15px' \n                                }\n                            }\n                        }\n                    />\n                    <form onSubmit={this.submitHandler} autoComplete='off'>\n                        <Grid container>\n                            <Grid item xs={11}>\n                                <TextField autoFocus={this.props.room.lastUpdatedField == 'chat'} style={{'width': '100%'}} name='currMessage' ref='message' value={this.state.currMessage} onChange={this.handleTextFieldChange} helperText={'Type a message...'} />\n                            </Grid>\n                            <Grid item xs={1}>\n                                <IconButton aria-label='send' type='submit' name='action'>\n                                    <SendIcon />\n                                </IconButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Paper>\n        )\n    }\n}\n\nChatMessageBox.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withTheme(withStyles(styles)(ChatMessageBox));","export default (theme) => ({\n    root: {},\n    chatContainer: {\n        padding: 16,\n        height: 300\n    },\n    chatFeed: {\n        minHeight: 300\n    }\n});","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { ChatMessageBox, GameInfoTable, Microphone, AudioDisplayTable } from '..';\nimport woodBlockUrl from '../../assets/woodblock.wav';\nimport MicIcon from '@material-ui/icons/Mic';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport LoopIcon from '@material-ui/icons/Loop';\n\nclass GamePortalContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            isUserPlayerSet: false,\n            isClickTrack: true,\n            isLoopPlayerSet: false,\n            isAllUserPlayerSet: false\n        };\n\n        // get bindings out of the way:\n        this.createMetronome = this.createMetronome.bind(this);\n        this.createClickTrack = this.createClickTrack.bind(this);\n        this.createLoopPlayer = this.createLoopPlayer.bind(this);\n        this.createAllUserPlayer = this.createAllUserPlayer.bind(this);\n\n        this.handleRecordLoop = this.handleRecordLoop.bind(this);\n        this.handleRecordOverLoop = this.handleRecordOverLoop.bind(this);\n        this.handlePlaybackMerged = this.handlePlaybackMerged.bind(this);\n        this.handleToggleClickTrack = this.handleToggleClickTrack.bind(this);\n\n        this.startMicrophonePermissions = this.startMicrophonePermissions.bind(this);\n        this.stopMicrophoneAccess = this.stopMicrophoneAccess.bind(this);\n        this.startRecording = this.startRecording.bind(this);\n        this.stopRecording = this.stopRecording.bind(this);\n        this.stopRecordingLoop = this.stopRecordingLoop.bind(this);\n        this.saveAudio = this.saveAudio.bind(this);\n        this.saveLoopedAudio = this.saveLoopedAudio.bind(this);\n        \n        // singleton settings    \n        Tone.context.latencyHint = 'interactive';\n        Tone.Transport.bpm.value = this.props.room.bpm; // does this update??\n        Tone.Buffer.on('load', \n            () => {this.setState({isLoaded: true});}\n        );\n\n        // useful Tone.Time objects (DO THESE UPDATE?)\n        this.toneNumBars = Tone.Time(this.props.room.numBars, 'm');\n        this.toneTotalBars = Tone.Time(this.props.room.numBars * this.props.room.numLoops, 'm')\n    \n        // declare the players\n        this.loopPlayer = null;\n        this.userPlayers = null;\n        this.allUserPlayer = null;\n        this.metronome = null;\n        this.clickTrack = null;\n\n        // start and stop recording events\n        this.startRecordEvent = new Tone.Event(this.startRecording);\n        this.stopRecordEvent = new Tone.Event(this.stopRecording);\n        this.stopRecordLoopEvent = new Tone.Event(this.stopRecordingLoop);\n\n        if (!this.state.isLoopPlayerSet) this.createLoopPlayer();\n        if (!this.state.isAllUserPlayerSet) this.createAllUserPlayer();\n        this.createClickTrack();\n        this.createMetronome();\n\n    }\n    // -------------------------------------------------------------------------------------\n    // Tone Object Creation\n\n    createMetronome() {\n        let metronomeSynth = new Tone.MembraneSynth().toMaster();\n        this.metronome = new Tone.Loop(\n            (time) => {metronomeSynth.triggerAttackRelease('C1', '4n', time);},\n            '4n'\n        );\n    }\n\n    createClickTrack() {\n        let woodBlock = new Tone.Player(woodBlockUrl).toMaster();\n        woodBlock.volume.value = 1;\n        this.clickTrack = new Tone.Loop(\n            (time) => {woodBlock.start(time, 0, '4n');},\n            '4n'\n        );\n    }\n\n    createLoopPlayer() {\n        // check for loop audio\n        if (this.props.game.baselinePlayer != null) {\n            var baselinePlayerName = this.props.game.baselinePlayer.playerName;\n        }\n        else {\n            return;\n        }\n        let playerData = this.props.room.users[baselinePlayerName];\n\n        if (playerData.loopUrl != null) {\n            let loopUrl = playerData.loopUrl;\n        \n            let player = new Tone.Player(loopUrl).toMaster();\n            player.fadeOut = '4n';\n            \n            this.loopPlayer = new Tone.Event(\n                (time, duration) => {player.start(time, 0, duration);},\n                this.toneNumBars + Tone.Time('8n')\n            );\n\n            this.loopPlayer.loop = this.props.room.numLoops;\n            this.loopPlayer.loopStart = 0;\n            this.loopPlayer.loopEnd = this.toneNumBars;\n\n            // eslint-disable-next-line react/no-direct-mutation-state\n            this.state = { ...this.state, isLoopPlayerSet: true };\n        } \n    }\n\n    createAllUserPlayer() {\n        // get available audio\n        var availableAudio = {};\n        var events = {};\n        Object.keys(this.props.room.users).map((playerName, i) => {\n            let playerData = this.props.room.users[playerName];\n            if (playerData.audioUrl != null) {\n                availableAudio[playerName] = playerData.audioUrl;\n                events[playerName] = [0, playerName];\n            }\n        });\n        // if any at least one exists, put together the Sequence\n        if (Object.entries(availableAudio).length > 0) {\n\n            this.userPlayers = new Tone.Players(availableAudio).toMaster();\n            this.allUserPlayer = new Tone.Part(\n                (time, playerName) => {\n                    let p = this.userPlayers.get(playerName);\n                    p.start(time, 0, this.toneTotalBars + Tone.Time('4n'));\n                }, \n                Object.values(events)\n            );\n            // eslint-disable-next-line react/no-direct-mutation-state\n            this.state = {...this.state, isAllUserPlayerSet: true};\n        }\n    }\n\n    // -------------------------------------------------------------------------------------\n    // Microphone Stuff\n\n    startMicrophonePermissions() {\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n            window.streamReference = stream;\n\n            this.setState({ hasAccessToMicrophone: true });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = e => {\n                if (e.data && e.data.size > 0) {\n                    this.chunks.push(e.data);\n                }\n            };\n        });\n    }\n    \n    stopMicrophoneAccess() {\n        window.streamReference.getAudioTracks().forEach((track) => {\n            track.stop();\n        });\n        this.setState({ hasAccessToMicrophone: false });\n    }\n\n    startRecording() {\n        if (this.mediaRecorder.state == 'inactive') {\n            this.chunks = [];\n            this.mediaRecorder.start(5);\n            this.setState({ isRecording: true });\n        }\n    }\n    // TODO #55 Combine with stop Recording\n    stopRecordingLoop() {\n        if (this.mediaRecorder.state == 'recording') {\n            this.mediaRecorder.stop();\n            this.setState({ isRecording: false });\n            this.stopMicrophoneAccess();\n            this.saveLoopedAudio();\n        }\n    }\n    \n    stopRecording() {\n        if (this.mediaRecorder.state == 'recording') {\n            this.mediaRecorder.stop();\n            this.setState({ isRecording: false });\n            this.stopMicrophoneAccess();\n            this.saveAudio();\n        }\n    }\n    // TODO: #55 Combine with SaveAudio\n    saveLoopedAudio() {\n        const blob = new Blob(this.chunks, { type: 'audio/webm;codecs=opus' });\n        const audioURL = URL.createObjectURL(blob);\n        this.props.uploadLoopedAudio(blob);\n        this.setState({\n            blobData: blob,\n            blobUri: audioURL\n        });\n    }\n\n    saveAudio() {\n        const blob = new Blob(this.chunks, { type: 'audio/webm;codecs=opus' });\n        const audioURL = URL.createObjectURL(blob);\n        this.props.uploadAudio(blob);\n        this.setState({\n            blobData: blob,\n            blobUri: audioURL\n        });\n    }\n    // -------------------------------------------------------------------------------------\n    // Handlers\n\n    handleToggleClickTrack(event) {\n        event.preventDefault();\n        this.setState({isClickTrack: !this.state.isClickTrack});\n        this.clickTrack.mute = this.state.isClickTrack;\n    }\n\n    handleRecordLoop(event) {\n        event.preventDefault();\n\n        // Ask the user to activate their mic\n        if (!this.state.hasAccessToMicrophone) {\n            this.startMicrophonePermissions();\n        }\n        \n        Tone.Transport.stop(); // Restart the Transport (probably unnecessary later)\n        Tone.Transport.cancel(); \n\n        // schedule the events\n        this.metronome.start(0).stop('1m');\n\n        // click track\n        this.clickTrack.start('1m').stop(Tone.Time('1m') + this.toneNumBars);\n        \n        this.startRecordEvent.start('1m');\n        this.stopRecordLoopEvent.start(Tone.Time('1m') + this.toneNumBars + Tone.Time('4n'));\n\n        Tone.Transport.start();\n    }\n\n    handleRecordOverLoop(event) {\n        event.preventDefault();\n\n        // Ask the user to activate their mic\n        if (!this.state.hasAccessToMicrophone) {\n            this.startMicrophonePermissions();\n        }\n        Tone.Transport.stop(); // Restart the Transport (probably unnecessary later)\n        Tone.Transport.cancel(); \n\n        // schedule the events\n        this.metronome.start(0).stop('1m');\n\n        // click track\n        this.clickTrack.start('1m').stop(Tone.Time('1m') + this.toneTotalBars);\n\n        // playback loop and start recording\n        this.loopPlayer.start('1m').stop(Tone.Time('1m') + this.toneTotalBars);\n\n        this.startRecordEvent.start('1m');\n        this.stopRecordEvent.start(Tone.Time('1m') + this.toneTotalBars + Tone.Time('4n'));\n\n        Tone.Transport.start();\n    }\n\n    handlePlaybackMerged(event) {\n        event.preventDefault();\n\n        // cancel recording related events and restart\n        Tone.Transport.stop();\n        Tone.Transport.cancel();\n\n        // schedule playback\n        this.loopPlayer.start(0).stop(this.toneTotalBars);\n        this.allUserPlayer.start(0).stop(this.toneNumBars + Tone.Time('4n'));\n        \n        Tone.Transport.start().stop(Tone.Time('1m') + this.toneTotalBars);\n    }\n    // -------------------------------------------------------------------------------------\n\n    render() {\n        return (\n            <Container fixed>\n                {this.props.room.roomCode ? \n                    <Grid container spacing={5}>\n                        <Grid item xs={8}>\n                            <AudioDisplayTable {...this.props} />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <GameInfoTable {...this.props} />\n                            <ChatMessageBox {...this.props} />\n                            <Microphone {...this.props} />\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                orientation=\"vertical\"\n                                color=\"primary\"\n                            >\n                                <Button\n                                    onClick = {this.handleToggleClickTrack}\n                                    variant = \"contained\"\n                                    color = \"default\"\n                                    startIcon = {this.state.isClickTrack ? <TimerOffIcon/> : <TimerIcon/>}\n                                >\n                                    Click Track\n                                </Button>\n                                <Button\n                                    onClick   = {this.handleRecordLoop}\n                                    disabled  = {this.state.isRecording}\n                                    variant   = \"contained\"\n                                    color     = \"primary\"\n                                    startIcon = {<LoopIcon/>}\n                                >\n                                    Record a Loop\n                                </Button>\n                                <Button\n                                    onClick   = {this.handleRecordOverLoop}\n                                    disabled  = {this.state.isRecording || !this.state.isLoaded || !this.state.isLoopPlayerSet }\n                                    variant   = \"contained\"\n                                    color     = \"primary\"\n                                    startIcon = {<MicIcon/>}\n                                >\n                                    Record over the Loop\n                                </Button>\n                                <Button\n                                    onClick   = {this.handlePlaybackMerged}\n                                    disabled  = {this.state.isRecording || !this.state.isLoaded || !this.state.isAllUserPlayerSet}\n                                    variant   = \"contained\"\n                                    color     = \"secondary\"\n                                    startIcon = {<LibraryMusicIcon/>}\n                                > \n                                    Play back merged Loop and Recording\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                    : <div>Join the room first!</div>}\n            </Container>\n        );\n    }\n    componentWillUnmount() {\n        Tone.Transport.cancel();\n    }\n}\n\nexport default GamePortalContainer;","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Metronome } from '..';\nimport TextField from '@material-ui/core/TextField';\nimport { GAME_STAGE } from '../../utils/stateEnums';\n\nclass GameInfoTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { };\n        this.restructureData = this.restructureData.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    restructureData() {\n        let { room: { bpm, numBars, numLoops } } = this.props;\n        return [\n            { label: 'BPM', name: 'bpm', value: bpm },\n            { label: '# Bars', name: 'numBars', value: numBars },\n            { label: '# Loops', name: 'numLoops', value: numLoops }\n        ];\n    }\n\n    handleTextFieldChange(e) {\n        let key = e.target.name;\n        let value = parseInt(e.target.value) || 0;\n\n        switch (key) {\n        case 'bpm': \n            this.props.updateRoomBpmSettings(value);\n            break;\n        case 'numBars':\n            this.props.updateRoomNumBarsSettings(value);\n            break;\n        case 'numLoops':\n            this.props.updateRoomNumLoopsSettings(value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.props.game.stage == GAME_STAGE.WAITING_TO_START) {\n            this.props.setBaselinePlayer();\n        }\n\n        this.props.advanceToNextGameStage();\n    }\n\n    render() {\n        let data = this.restructureData();\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <TableContainer component={Paper}>\n                    <Table size='small' aria-label='simple table'>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell colSpan={2}>\n                                    <Typography variant='h6'>Game Settings</Typography>\n                                </TableCell>\n                            </TableRow>\n                            {data.map((row, index) => (\n                                <TableRow key={index}>\n                                    <TableCell component='th' scope='row'>\n                                        {row.label}\n                                        {row.name == 'bpm' ? <Metronome {...this.props} /> : null}\n                                    </TableCell>\n                                    <TableCell align='left' colSpan={2}>\n                                        {this.props.game.stage == GAME_STAGE.WAITING_FOR_PLAYERS || this.props.game.stage == GAME_STAGE.WAITING_TO_START ? \n                                            <TextField\n                                                autoFocus={this.props.room.lastUpdatedField == row.name}\n                                                value={row.value}\n                                                name={row.name}\n                                                type='number'\n                                                onChange={this.handleTextFieldChange}\n                                                margin='none'\n                                                error={row.value <= 0}\n                                                helperText={row.value <= 0 ? `${row.label} must be greater than 0` : ''}\n                                                style={{ width: '100%' }}\n                                            /> : row.value\n                                        }\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n\n                            <TableRow>\n                                <TableCell component='th' scope='row'>\n                                    Total Measures\n                                </TableCell>\n                                <TableCell>\n                                    {this.props.room.numBars * this.props.room.numLoops}\n                                </TableCell>\n                                <TableCell align='right' style={{ padding: '0 16px 0 0' }}>\n                                    {(() => {\n                                        switch (this.props.game.stage) {\n                                        case GAME_STAGE.WAITING_FOR_PLAYERS:\n                                            return <Button type='submit' name='start' color='primary' onClick={this.handleSubmit} endIcon={<MusicNoteIcon fontSize='small' />}>Enter Room</Button>\n                                        case GAME_STAGE.WAITING_TO_START:\n                                            return(\n                                                <Button type='submit' name='start' color='primary' endIcon={<MusicNoteIcon fontSize='small' />}>I'll start first!</Button>\n                                            );\n                                        default:\n                                            return null;\n                                        }\n                                    })()}\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </form>\n        );\n    }\n}\n\nexport default GameInfoTable;","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isOn: false };\n        this.handleClick = this.handleClick.bind(this);\n\n        let volume = new Tone.Volume(5);\n        let synth = new Tone.MembraneSynth().chain(volume, Tone.Master);\n        this.loop = new Tone.Loop((time) => {\n            synth.triggerAttackRelease('C1', '4n', time);\n        }, '4n');\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        if (this.state.isOn) {\n            this.loop.stop();\n        } else {\n            this.loop.start();\n        }\n\n        if (Tone.Transport.state == 'stopped') {\n            Tone.Transport.start();\n        }\n        this.setState({ isOn: !this.state.isOn })\n    }\n\n    render() {\n        return (\n            <IconButton \n                aria-label='send' \n                type='submit' \n                name='action' \n                onClick={this.handleClick}\n                style={{ margin: '0 0 0 10px', padding: 0 }}>\n                {this.state.isOn ? <StopIcon /> : <PlayArrowIcon />}\n            </IconButton>\n        )\n    }\n}\n\nexport default Metronome;","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport IconButton from '@material-ui/core/IconButton';\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\n\nclass Microphone extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasAccessToMicrophone: false,\n            isRecording: false,\n            blobData: null,\n            blobUri: null\n        };\n\n        this.chunks = [];\n\n        this.mic = new Tone.UserMedia();\n        this.mic.connect(Tone.Master);\n        this.mediaRecorder = null;\n\n        this.handleClick = this.handleClick.bind(this);\n        this.startMicrophonePermissions = this.startMicrophonePermissions.bind(this);\n        this.stopMicrophoneAccess = this.stopMicrophoneAccess.bind(this);\n        this.startRecording = this.startRecording.bind(this);\n        this.stopRecording = this.stopRecording.bind(this);\n        this.saveAudio = this.saveAudio.bind(this);\n    }\n\n    startMicrophonePermissions() {\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n            window.streamReference = stream;\n\n            this.setState({ hasAccessToMicrophone: true });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = e => {\n                if (e.data && e.data.size > 0) {\n                    this.chunks.push(e.data);\n                }\n            };\n        })\n    }\n\n    stopMicrophoneAccess() {\n        window.streamReference.getAudioTracks().forEach((track) => {\n            track.stop();\n        });\n    }\n\n    startRecording() {\n        // Ask the user to activate their mic\n        if (!this.state.hasAccessToMicrophone) {\n            this.startMicrophonePermissions();\n        }\n        \n        this.chunks = [];\n\n        this.mic.open().then(() => {\n            Tone.Transport.start();\n            this.mediaRecorder.start(5);\n            this.setState({ isRecording: true });\n        });\n    }\n\n    stopRecording() {\n        this.setState({ hasAccessToMicrophone: false });\n        this.stopMicrophoneAccess();\n        this.mediaRecorder.stop();\n        this.mic.close();\n        Tone.Transport.stop();\n        this.setState({ isRecording: false });\n    }\n\n    saveAudio() {\n        const blob = new Blob(this.chunks, { type: 'audio/webm;codecs=opus' });\n        const audioURL = URL.createObjectURL(blob);\n        this.props.uploadAudio(blob);\n        this.setState({\n            blobData: blob,\n            blobUri: audioURL\n        });\n    }\n\n    handleClick() {\n        let recordingLength = Tone.Time(`${this.props.room.numBars}m`).toSeconds() * 1000;\n        recordingLength = 3000;\n\n        this.startRecording();\n        setTimeout(() => {\n            this.stopRecording();\n            this.saveAudio();\n        }, recordingLength);\n    }\n\n    render() {\n        return (\n            <div>\n                <IconButton\n                    type='submit'\n                    name='action'\n                    onClick={this.handleClick}\n                    style={{ margin: '0 0 0 10px', padding: 0 }}>\n                    {this.state.isRecording ? <MicOffIcon /> : <MicIcon />}\n                </IconButton>\n            </div>\n        )\n    }\n}\n\nexport default Microphone;","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { AudioWaveform, RecordingSpinIcon } from '..';\nimport styles from './AudioDisplayTableStyles';\n\nclass AudioDisplayTable extends Component {\n    constructor(props) {\n        super(props);\n        this.playSelectedAudio = this.playSelectedAudio.bind(this);\n        this.stopSelectedAudio = this.stopSelectedAudio.bind(this);\n        this.playMergedAudio = this.playMergedAudio.bind(this);\n        this.getPlayerList = this.getPlayerList.bind(this);\n        this.shouldPanelBeFixed = this.shouldPanelBeFixed.bind(this);\n        this.handlePanelChange = this.handlePanelChange.bind(this);\n\n        let availableAudio = {};\n        let initExpand = {};\n        Object.keys(this.props.room.users).map((playerName, i) => {\n            let playerData = this.props.room.users[playerName];\n            if (playerData.audioUrl != null) {\n                availableAudio[playerName] = playerData.audioUrl;\n            }\n\n            initExpand[playerName] = false;\n        });\n\n        this.state = {\n            isPlayingMerged: false,\n            isPlayingSingle: false,\n            panelWidth: 500,\n            isExpanded: initExpand\n        };\n\n        this.sequence = null;\n        this.player = new Tone.Players(availableAudio, {\n            onload: () => {\n                this.sequence = new Tone.Sequence((time, note) => {\n                    let p = this.player.get(note);\n                    p.sync();\n                    p.start();\n                }, Object.keys(availableAudio), '4n');\n                this.sequence.sync();\n            }\n        }).toMaster();\n    }\n\n    componentDidMount() {\n        const computedStyle = window.getComputedStyle(this.refs.expansionPanel);\n        this.setState({ panelWidth: this.refs.expansionPanel.clientWidth - parseFloat(computedStyle.paddingLeft) - parseFloat(computedStyle.paddingRight) });\n    }\n\n    playSelectedAudio(playerName) {\n        Tone.Transport.start();\n        this.player.get(playerName).start();\n        this.setState({ isPlayingSingle: true });\n    }\n\n    stopSelectedAudio(playerName) {\n        this.player.get(playerName).stop();\n        Tone.Transport.stop();\n        this.setState({ isPlayingSingle: false });\n    }\n\n    playMergedAudio() {\n        if (this.state.isPlayingMerged) {\n            this.sequence.stop(this.sequence.length);\n            Tone.Transport.stop();\n        } else {\n            Tone.Transport.start();\n            this.sequence.start();\n        }\n\n        this.setState({ isPlayingMerged: !this.state.isPlayingMerged });\n    }\n\n    getPlayerList() {\n        let playerList = [];\n        let baselinePlayer = null;\n        let currPlayer = null;\n\n        Object.keys(this.props.room.users).forEach((playerName) => {\n            const user = {\n                ...this.props.room.users[playerName],\n                playerName\n            };\n            if (this.props.game.baselinePlayer && playerName == this.props.game.baselinePlayer.playerName) {\n                baselinePlayer = user;\n            } else if (playerName == this.props.user.playerName) {\n                currPlayer = user;\n            } else {\n                playerList.push(user);\n            }\n        });\n\n        if (baselinePlayer) {\n            // Move baseline player to front of list\n            playerList.unshift(baselinePlayer);\n        }\n        \n        if (currPlayer) {\n            // Move curr player to end of list\n            playerList.push(currPlayer);\n        }\n        \n        return playerList;\n    }\n\n    shouldPanelBeFixed(player) {\n        if (player.audioUrl && (player.playerName == this.props.game.baselinePlayer.playerName \n            || player.playerName == this.props.user.playerName)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    handlePanelChange(player) {\n        let newIsExpanded = {\n            ...this.state.isExpanded,\n            [player.playerName]: !this.state.isExpanded[player.playerName]\n        }\n        this.setState({\n            isExpanded: newIsExpanded\n        })\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return(\n            <div width={1}>\n                {this.getPlayerList().map((player, i) => {\n                    return(\n                        <ExpansionPanel key={i} expanded={this.shouldPanelBeFixed(player) || this.state.isExpanded[player.playerName]}>\n                            <ExpansionPanelSummary \n                                expandIcon={(player.audioUrl == undefined || this.shouldPanelBeFixed(player)) ? null : <ExpandMoreIcon />} \n                                onClick={() => this.handlePanelChange(player)}>\n                                {player.isRecording ? <RecordingSpinIcon /> : null}\n                                <Typography>{player.playerName}</Typography>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails ref='expansionPanel'>\n                                {player.audioUrl != null ?\n                                    <AudioWaveform audioName={player.playerName} \n                                                audioUrl={player.audioUrl} \n                                                height={100} \n                                                width={this.state.panelWidth} \n                                                shouldShowControls={false} /> \n                                : null}\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    );\n                })}\n            </div>\n        )\n    }\n}\n\nAudioDisplayTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AudioDisplayTable);","export default (theme) => ({\n    root: {}\n});","import React, { Component } from 'react';\n// import { withStyles } from '@material-ui/core/styles';\nimport Tone from 'tone';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport Button from '@material-ui/core/Button';\nimport SAMPLE_MP3 from '../../assets/kevin_bossa.mp3';\n\nclass Looper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n        };\n        Tone.Transport.bpm.value = this.props.room.bpm;\n        Tone.context.latencyHint = 'playback';\n\n        this.player = new Tone.Player(SAMPLE_MP3).toMaster();\n        this.player.retrigger = true;\n\n        Tone.Buffer.on('load', \n            () => {this.setState({...this.state, isLoaded: true});}\n        );\n        \n        this.handleOnClick = this.handleOnClick.bind(this);\n        this.playAudioCallback = this.playAudioCallback.bind(this);\n\n        this.toneNumBars = Tone.Time(this.props.room.numBars, 'm');\n        this.toneTotalBars = Tone.Time(this.props.room.numBars * this.props.room.numLoops, 'm')\n        this.looper = new Tone.Event((this.playAudioCallback), this.toneNumBars);\n        this.looper.loop = this.props.room.numLoops;\n        this.looper.loopStart = '1n';\n        this.looper.loopEnd = this.toneNumBars + Tone.Time('1n');\n\n    }\n    \n    playAudioCallback(time, duration) {\n        this.player.start(time, 0, duration); \n    }\n\n    handleOnClick(event) {\n        event.preventDefault();\n        console.log(this.looper)\n        if (this.looper.state == 'stopped') {\n\n            this.looper.start('1n'); \n            this.looper.stop(this.toneTotalBars + Tone.Time('1n'));\n            Tone.Transport.seconds = 0; // restart\n            \n        }\n        else if (this.looper.state == 'started') {\n            this.looper.stop();\n            this.player.stop();\n        }\n        else {\n            console.log('state is busted');\n        }\n        if (Tone.Transport.state == 'stopped') {\n            Tone.Transport.start();\n        }\n    }\n\n    render() {\n        const isLoaded = this.state.isLoaded;\n        return (\n            <div>\n                <Button\n                    onClick   = {this.handleOnClick}\n                    disabled  = {!isLoaded}\n                    variant   = \"contained\"\n                    color     = \"default\"\n                    startIcon = {<LoopIcon/>}\n                >\n                    Loop Sample mp3\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default Looper;","import React, { Component } from 'react';\n// import { withStyles } from '@material-ui/core/styles';\nimport Tone from 'tone';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport Button from '@material-ui/core/Button';\nimport woodBlockUrl from '../../assets/woodblock.wav';\nimport Grid from '@material-ui/core/Grid';\n\nclass Looper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            isRecording: false,\n            isPlaying: false,\n        };\n\n        this.chunks = [];\n\n        this.mic = new Tone.UserMedia().toMaster(); // recording feedback for testing\n        // Tone.Transport.bpm.value = this.props.room.bpm;\n        Tone.context.latencyHint = 'fastest';\n\n        this.player = new Tone.Player().toMaster(); // eventually use Tone.Player to get audio from server\n        this.mediaRecorder = null;\n\n        // metronome\n        let metronomeSynth = new Tone.MembraneSynth({volume: 5}).toMaster();\n        this.metronome = new Tone.Loop(\n            (time) => {metronomeSynth.triggerAttackRelease('C1', '4n', time);},\n            '4n'\n        );\n\n        // click track\n        this.woodBlock = new Tone.Player(woodBlockUrl).toMaster();\n        this.woodBlock.volume.value = 1;\n        this.clickTrack = new Tone.Loop(\n            (time) => {this.woodBlock.start(time, 0, '4n');},\n            '4n'\n        );\n\n        this.handleRecordLoop = this.handleRecordLoop.bind(this);\n        this.handlePlaybackLoop = this.handlePlaybackLoop.bind(this);\n        this.playAudioCallback = this.playAudioCallback.bind(this);\n        this.startMicrophonePermissions = this.startMicrophonePermissions.bind(this);\n        this.stopMicrophoneAccess = this.stopMicrophoneAccess.bind(this);\n        this.startRecording = this.startRecording.bind(this);\n        this.stopRecording = this.stopRecording.bind(this);\n        this.saveAudio = this.saveAudio.bind(this);\n        // this.handleToggleClickTrack = this.handleToggleClickTrack.bind(this);\n\n        // declare Tone.Time objects\n        this.toneNumBars = Tone.Time(this.props.room.numBars, 'm');\n        this.toneTotalBars = Tone.Time(this.props.room.numBars * this.props.room.numLoops, 'm')\n        \n        // looper initialization\n        this.looper = new Tone.Event((this.playAudioCallback), this.toneNumBars + Tone.Time('4n'));\n        this.looper.loop = this.props.room.numLoops;\n        this.looper.loopStart = 0;\n        this.looper.loopEnd = this.toneNumBars;\n\n        // start and stop recording events\n        this.startRecordEvent = new Tone.Event(this.startRecording);\n        this.stopRecordEvent = new Tone.Event(this.stopRecording);\n    }\n\n    startMicrophonePermissions() {\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n            window.streamReference = stream;\n\n            this.setState({ hasAccessToMicrophone: true });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = e => {\n                if (e.data && e.data.size > 0) {\n                    this.chunks.push(e.data);\n                }\n            };\n        });\n    }\n    \n    stopMicrophoneAccess() {\n        window.streamReference.getAudioTracks().forEach((track) => {\n            track.stop();\n        });\n        this.setState({ hasAccessToMicrophone: false });\n    }\n\n    startRecording() {\n        this.chunks = [];\n\n        this.mic.open().then(() => {\n            this.mediaRecorder.start(5);\n            this.setState({ isRecording: true });\n        });\n    }\n\n    stopRecording() {\n\n        this.stopMicrophoneAccess();\n        this.mediaRecorder.stop();\n        this.mic.close();\n        this.setState({ isRecording: false });\n        this.saveAudio();\n    }\n\n    saveAudio() {\n        const blob = new Blob(this.chunks, { type: 'audio/webm;codecs=opus' });\n        const audioURL = URL.createObjectURL(blob);\n        this.props.uploadLoopedAudio(blob);\n        this.setState({\n            blobData: blob,\n            blobUri: audioURL\n        });\n    }\n\n    playAudioCallback(time, duration) {\n        this.player.start(time, 0, duration); \n    }\n\n    handleRecordLoop(event) {\n        event.preventDefault();\n\n        // Ask the user to activate their mic\n        if (!this.state.hasAccessToMicrophone) {\n            this.startMicrophonePermissions();\n        }\n        \n        Tone.Transport.stop(); // Restart the Transport (probably unnecessary later)\n        Tone.Transport.cancel(); \n\n        // schedule the events\n        this.metronome.start(0).stop('1m');\n\n        // click track\n        this.clickTrack.start('1m').stop(Tone.Time('1m') + this.toneNumBars);\n        \n        this.startRecordEvent.start('1m');\n        this.stopRecordEvent.start(Tone.Time('1m') + this.toneNumBars + Tone.Time('4n'));\n\n        Tone.Transport.start();\n  \n    }\n    handlePlaybackLoop(event) {\n\n        event.preventDefault();\n\n        // Grab the audio data and load to the buffer.\n        let playerName = this.props.user.playerName;\n        let playerData = this.props.room.users[playerName];\n\n        let loopUrl = playerData.loopUrl;\n        this.player.buffer = new Tone.Buffer(loopUrl);\n\n        // cancel recording related events and restart\n        Tone.Transport.cancel();\n        Tone.Transport.seconds = 0; // restart\n\n        this.looper.start(0); \n        this.looper.stop(this.toneTotalBars);\n\n        if (Tone.Transport.state == 'stopped') {\n            Tone.Transport.start();\n        }\n    }\n\n    render() {\n        return (\n            <Grid container\n                direction  = \"column\"\n                justify    = \"center\"\n                alignItems = \"center\"\n            >\n                <Grid item>\n                    <Button\n                        onClick   = {this.handleRecordLoop}\n                        disabled  = {this.state.isRecording || this.state.isPlaying}\n                        variant   = \"contained\"\n                        color     = \"primary\"\n                        startIcon = {<LoopIcon/>}\n                    >\n                        Record a Loop\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        onClick   = {this.handlePlaybackLoop}\n                        disabled  = {this.state.isRecording || this.state.isPlaying}\n                        variant   = \"contained\"\n                        color     = \"secondary\"\n                        startIcon = {<PlayCircleOutlineIcon/>}\n                    > Play back my Loop\n                    </Button>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nexport default Looper;","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport woodBlockUrl from '../../assets/woodblock.wav';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport MicIcon from '@material-ui/icons/Mic';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\n\n// play back the looped recording while recording\nclass UserRecorder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            isAudioPlayerSet: false,\n            isClickTrack: true\n        };\n        Tone.context.latencyHint = 'fastest';\n\n        this.loopPlayer = null;\n        this.userPlayers = null;\n        this.allUserPlayer = null;\n\n        Tone.Buffer.on('load', \n            () => {this.setState({isLoaded: true});}\n        );\n\n        // metronome\n        let metronomeSynth = new Tone.MembraneSynth().toMaster();\n        metronomeSynth.volume.value = 5;\n        this.metronome = new Tone.Loop(\n            (time) => {metronomeSynth.triggerAttackRelease('C1', '4n', time);},\n            '4n'\n        );\n        // click track\n        this.woodBlock = new Tone.Player(woodBlockUrl).toMaster();\n        this.woodBlock.volume.value = 1;\n        this.clickTrack = new Tone.Loop(\n            (time) => {this.woodBlock.start(time, 0, '4n');},\n            '4n'\n        );\n\n        this.handleRecordAudio = this.handleRecordAudio.bind(this);\n        this.handlePlaybackMerged = this.handlePlaybackMerged.bind(this);\n        this.playAudioCallback = this.playAudioCallback.bind(this);\n        this.startMicrophonePermissions = this.startMicrophonePermissions.bind(this);\n        this.stopMicrophoneAccess = this.stopMicrophoneAccess.bind(this);\n        this.startRecording = this.startRecording.bind(this);\n        this.stopRecording = this.stopRecording.bind(this);\n        this.saveAudio = this.saveAudio.bind(this);\n        this.setAudioPlayer = this.setAudioPlayer.bind(this);\n        this.handleToggleClickTrack = this.handleToggleClickTrack.bind(this);\n\n        // declare Tone.Time objects\n        this.toneNumBars = Tone.Time(this.props.room.numBars, 'm');\n        this.toneTotalBars = Tone.Time(this.props.room.numBars * this.props.room.numLoops, 'm')\n\n        // looper initialization\n        this.looper = new Tone.Event((this.playAudioCallback), this.toneNumBars + Tone.Time('4n'));\n        this.looper.loop = this.props.room.numLoops;\n        this.looper.loopStart = 0;\n        this.looper.loopEnd = this.toneNumBars;\n\n        // start and stop recording events\n        this.startRecordEvent = new Tone.Event(this.startRecording);\n        this.stopRecordEvent = new Tone.Event(this.stopRecording);\n    }\n\n    startMicrophonePermissions() {\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n            window.streamReference = stream;\n\n            this.setState({ hasAccessToMicrophone: true });\n\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.ondataavailable = e => {\n                if (e.data && e.data.size > 0) {\n                    this.chunks.push(e.data);\n                }\n            };\n        });\n    }\n    \n    stopMicrophoneAccess() {\n        window.streamReference.getAudioTracks().forEach((track) => {\n            track.stop();\n        });\n        this.setState({ hasAccessToMicrophone: false });\n    }\n\n    startRecording() {\n        this.chunks = [];\n        this.mediaRecorder.start(5);\n        this.setState({ isRecording: true });\n    }\n\n    stopRecording() {\n        this.mediaRecorder.stop();\n        this.setState({ isRecording: false });\n        this.stopMicrophoneAccess();\n        this.saveAudio();\n        this.setState({isAudioPlayerSet : false});\n    }\n\n    saveAudio() {\n        const blob = new Blob(this.chunks, { type: 'audio/webm;codecs=opus' });\n        const audioURL = URL.createObjectURL(blob);\n        this.props.uploadAudio(blob);\n        this.setState({\n            blobData: blob,\n            blobUri: audioURL\n        });\n    }\n\n    playAudioCallback(time, duration) {\n        this.loopPlayer.start(time, 0, duration); \n    }\n\n    handleRecordAudio(event) {\n        event.preventDefault();\n\n        // Ask the user to activate their mic\n        if (!this.state.hasAccessToMicrophone) {\n            this.startMicrophonePermissions();\n        }\n        Tone.Transport.stop(); // Restart the Transport (probably unnecessary later)\n        Tone.Transport.cancel(); \n\n        // schedule the events\n        // metronome for one measure\n        this.metronome.start(0).stop('1m');\n\n        // click track\n        this.clickTrack.start('1m').stop(Tone.Time('1m') + this.toneTotalBars);\n\n        // play back loop and start recording\n        this.looper.start('1m').stop(Tone.Time('1m') + this.toneTotalBars);\n\n        this.startRecordEvent.start('1m');\n        this.stopRecordEvent.start(Tone.Time('1m') + this.toneTotalBars + Tone.Time('4n'));\n\n        Tone.Transport.start();\n\n    }\n    handlePlaybackMerged(event) {\n        event.preventDefault();\n\n        // cancel recording related events and restart\n        Tone.Transport.stop();\n        Tone.Transport.cancel();\n\n        // schedule playback\n        this.looper.start(0).stop(this.toneTotalBars);\n        this.allUserPlayer.start(0).stop(this.toneNumBars + Tone.Time('4n'));\n        \n        Tone.Transport.start();\n    }\n\n    setAudioPlayer() {\n        let availableAudio = {};\n        let loopUrl = {};\n        Object.keys(this.props.room.users).map((playerName, i) => {\n            let playerData = this.props.room.users[playerName];\n            if (playerData.audioUrl != null) {\n                availableAudio[playerName] = playerData.audioUrl;\n            }\n            if (playerData.loopUrl != null) {\n                loopUrl = playerData.loopUrl;\n            }\n        });\n\n        if (loopUrl != null) {\n            this.loopPlayer = new Tone.Player(loopUrl).toMaster();\n            this.loopPlayer.fadeOut = '4n';\n            this.setState({isAudioPlayerSet : true});\n        }\n\n        if (Object.entries(availableAudio).length > 0) {\n\n            this.userPlayers = new Tone.Players(availableAudio).toMaster();\n            this.allUserPlayer = new Tone.Sequence(\n                (time, audioUrl) => {\n                    let p = this.userPlayers.get(audioUrl);\n                    p.start(time);\n                }, \n                Object.keys(availableAudio), \n            );\n\n            this.setState({isAudioPlayerSet : true});\n        }\n        \n    }\n    \n    handleToggleClickTrack(event) {\n        event.preventDefault();\n        this.setState({isClickTrack: !this.state.isClickTrack});\n        this.clickTrack.mute = this.state.isClickTrack;\n    }\n\n    render() {\n        // load audio data into the buffer\n        if (!this.state.isAudioPlayerSet) { \n            this.setAudioPlayer();\n        }\n        return (\n            <ButtonGroup \n                orientation=\"vertical\"\n                color=\"primary\"\n            >\n                <Button\n                    onClick = {this.handleToggleClickTrack}\n                    variant = \"contained\"\n                    color = \"default\"\n                    startIcon = {this.state.isClickTrack ? <TimerOffIcon/> : <TimerIcon/>}\n                >\n                    Click Track\n                </Button>\n                <Button\n                    onClick   = {this.handleRecordAudio}\n                    disabled  = {this.state.isRecording || !this.state.isLoaded || !this.state.isAudioPlayerSet }\n                    variant   = \"contained\"\n                    color     = \"primary\"\n                    startIcon = {<MicIcon/>}\n                >\n                    Record over the Loop\n                </Button>\n                <Button\n                    onClick   = {this.handlePlaybackMerged}\n                    disabled  = {this.state.isRecording || !this.state.isLoaded || !this.state.isAudioPlayerSet}\n                    variant   = \"contained\"\n                    color     = \"secondary\"\n                    startIcon = {<LibraryMusicIcon/>}\n                > \n                    Play back merged Loop and Recording\n                </Button>\n            </ButtonGroup>\n        );\n    }\n}\n\nexport default UserRecorder;","import Tone from 'tone';\n\nexport function Player(audioBuffer) {\n    return {\n        externalPlayer: new Tone.Player(audioBuffer),\n        eventEmitter: null,\n\n        init: function (eventEmitter) {\n            this.eventEmitter = eventEmitter;\n\n            this.externalPlayer.sync();\n            this.externalPlayer.start();\n\n            Tone.connectSeries(this.externalPlayer, Tone.Master);\n\n            eventEmitter.emit('player.canplay');\n\n            Tone.Transport.scheduleRepeat(() => {\n                var time = this.getCurrentTime();\n                eventEmitter.emit('player.timeupdate', time);\n\n                if (time >= this.getDuration()) {\n                    Tone.Transport.stop();\n                }\n            }, 0.25);\n        },\n\n        destroy: function() {\n            Tone.context.dispose();\n            this.externalPlayer = null;\n            this.eventEmitter = null;\n        },\n\n        play: function() {\n            Tone.Transport.start(\n                Tone.now(),\n                this.getCurrentTime()\n            );\n\n            this.eventEmitter.emit('player.play', this.getCurrentTime());\n        },\n\n        pause: function() {\n            Tone.Transport.pause();\n            this.eventEmitter.emit('player.pause', this.getCurrentTime());\n        },\n\n        isPlaying: function() {\n            return Tone.Transport.state === 'started';\n        },\n\n        seek: function(time) {\n            Tone.Transport.seconds = time;\n\n            this.eventEmitter.emit('player.seeked', this.getCurrentTime());\n            this.eventEmitter.emit('player.timeupdate', this.getCurrentTime());\n        },\n\n        isSeeking: function() {\n            return false;\n        },\n\n        getCurrentTime: function() {\n            return this.externalPlayer.buffer.toSeconds(Tone.Transport.position);\n        },\n\n        getDuration: function () {\n            return this.externalPlayer.buffer.duration;\n        }\n    }\n}","import React, { Component } from 'react';\nimport Peaks from 'peaks.js';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport StopIcon from '@material-ui/icons/Stop';\nimport { Player } from './Player';\n\nclass AudioWaveform extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            peaks: null, \n            isPlaying: false \n        };\n\n        this.play = this.play.bind(this);\n        this.pause = this.pause.bind(this);\n\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        this.audioContext = new AudioContext();\n    }\n\n    async componentDidMount() {\n        let audioName = this.props.audioName;\n        let audioUrl = this.props.audioUrl;\n        let height = this.props.height;\n        let _component = this;\n        await fetch(audioUrl)\n            .then((response) => {\n                return response.blob();\n            })\n            .then((blob) => {\n                return new Response(blob).arrayBuffer()\n            })\n            .then((buffer) => {\n                return this.audioContext.decodeAudioData(buffer);\n            })\n            .then((audioBuffer) => {\n                var options = {\n                    containers: {\n                        // zoomview: this.refs.zoomView,\n                        overview: this.refs[`overView-${audioName}`]\n                    },\n                    height: height,\n                    overviewWaveformColor: 'navy',\n                    player: new Player(audioBuffer),\n                    webAudio: {\n                        audioBuffer: audioBuffer,\n                        scale: 128,\n                        multiChannel: false\n                    },\n                    keyboard: true,\n                    showPlayheadTime: true,\n                    zoomLevels: [128, 256, 512, 1024, 2048, 4096]\n                };\n\n                Peaks.init(options, (err, peaksInstance) => {\n                    if (err) {\n                        console.error(err.message);\n                        return;\n                    }\n\n                    _component.setState({ peaks: peaksInstance });\n                });\n            });\n    }\n\n    play() {\n        this.state.peaks.player.play();\n    }\n\n    pause() {\n        this.state.peaks.player.pause();\n    }\n\n    render() {\n        return (\n            <div>\n                <div ref={`zoomView-${this.props.audioName}`} style={{ display: 'none' }}></div>\n                <div ref={`overView-${this.props.audioName}`} style={{ backgroundColor: 'white', borderColor: 'grey', height: this.props.height, width: this.props.width }}></div>\n\n                {this.state.peaks && this.props.shouldShowControls ? \n                    <div>\n                        <div>\n                            <IconButton onClick={this.play}>\n                                <PlayCircleFilledIcon />\n                            </IconButton>\n                            <IconButton onClick={this.pause}>\n                                <StopIcon />\n                            </IconButton>\n                        </div> \n                    </div>\n                : null}\n            </div>\n        )\n    }\n}\n\nexport default AudioWaveform;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport styles from './GameStageStepIconStyles';\n\nfunction GameStageStepIcon(props) {\n    const { classes, active, completed } = props;\n\n    return (\n        <div className={clsx(classes.root, {\n                [classes.active]: active,\n            })}>\n            {completed || active ? <MusicNoteIcon className={classes.completed} /> : <div className={classes.circle} />}\n        </div>\n    );\n}\n\nexport default withStyles(styles)(GameStageStepIcon);\n","export default (theme) => ({\n    root: {\n        color: '#eaeaf0',\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        backgroundColor: '#eaeaf0',\n    },\n    completed: {\n        color: theme.palette.primary.dark,\n        zIndex: 1,\n        fontSize: 18,\n    }\n});","import StepConnector from '@material-ui/core/StepConnector';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst GameStageStepConnector = withStyles((theme) => ({\n    alternativeLabel: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    active: {\n        '& $line': {\n            borderColor: theme.palette.primary.extraLight,\n        },\n    },\n    completed: {\n        '& $line': {\n            borderColor: theme.palette.primary.extraLight,\n        },\n    },\n    line: {\n        borderColor: '#eaeaf0',\n        borderTopWidth: 3,\n        borderRadius: 1,\n    },\n}))(StepConnector);\n\nexport default GameStageStepConnector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport GameStageStepIcon from './GameStageStepIcon/GameStageStepIcon';\nimport GameStageStepConnector from './GameStageStepConnector/GameStageStepConnector';\nimport styles from './GameStageDisplayStyles';\n\nclass GameStageDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const steps = this.props.steps;\n        const activeStep = this.props.activeStep;\n\n        const { classes } = this.props;\n        return (\n            <div>\n                <Stepper alternativeLabel activeStep={activeStep} connector={<GameStageStepConnector />} className={classes.stageRoot}>\n                    {steps.map((label) => (\n                        <Step key={label}>\n                            <StepLabel StepIconComponent={GameStageStepIcon}>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n        </div>\n        )\n    }\n}\n\nGameStageDisplay.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(GameStageDisplay);","export default (theme) => ({\n    root: {},\n    stageRoot: {\n        border: 'none',\n        backgroundColor: theme.palette.grey['50'],\n        margin: '10px 0 10px 0'\n    }\n});","import { GAME_STAGE } from './stateEnums';\n\nclass Game {\n    static Progression = [\n            GAME_STAGE.WAITING_FOR_PLAYERS,\n            GAME_STAGE.WAITING_TO_START,\n            GAME_STAGE.BASELINE_PLAYER_RECORDING,\n            GAME_STAGE.OTHER_PLAYERS_LISTENING_TO_BASELINE,\n            GAME_STAGE.OTHER_PLAYERS_RECORDING,\n            GAME_STAGE.FINAL_RECORDING_DONE\n    ]\n\n    static NextStage(stage) {\n        let index = this.Progression.indexOf(stage);\n        index = index < this.Progression.length - 1 ? index + 1 : index;\n        return this.Progression[index];\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withStyles } from '@material-ui/core/styles';\nimport { RoomPageContainer, GamePortalContainer, LandingPage, GameStageDisplay } from '..';\nimport { GAME_STAGE, ROOM_STATE } from '../../utils/stateEnums';\nimport styles from './TuttiContainerStyles';\nimport Game from '../../utils/GameModel';\nimport { isUserCreated } from '../../utils/roomUtils.js';\n\nclass TuttiContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        this.getGameSteps = this.getGameSteps.bind(this);\n\n        // If someone new is trying to join the room, get the roomcode \n        // from the URL and fetch the room data from the API and load \n        // the data into the Redux store\n        if (!props.match.params.roomId || (props.match.params.roomId && props.room.roomCode == null)) {\n            props.getRoom(props.match.params.roomId);\n        }\n    }\n\n    getGameSteps() {\n        if (this.props.game.baselinePlayer) {\n            let i = Game.Progression.indexOf(GAME_STAGE.BASELINE_PLAYER_RECORDING);\n            let roomProgression = Game.Progression;\n            roomProgression[i] = `${this.props.game.baselinePlayer.playerName} is recording`;\n            return roomProgression;\n        } else {\n            return Game.Progression;\n        }\n    }\n\n    getCurrentGameStepIndex() {\n        return Game.Progression.indexOf(this.props.game.stage);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.root}>\n                {(() => {\n                    switch (this.props.room.roomState) {\n                        case ROOM_STATE.EMPTY:\n                            return <Backdrop open><CircularProgress color='inherit' /></Backdrop>;\n                        case ROOM_STATE.VALID:\n                            if (!isUserCreated(this.props)) {\n                                return <LandingPage {...this.props} />;\n                            }\n\n                            if (this.props.game.stage == GAME_STAGE.WAITING_FOR_PLAYERS) {\n                                return(\n                                    <div>\n                                        <GameStageDisplay {...this.props} steps={this.getGameSteps()} activeStep={this.getCurrentGameStepIndex()} />                                    \n                                        <RoomPageContainer {...this.props} />\n                                    </div>\n                                );\n                            } else {\n                                return(\n                                    <div>\n                                        <GameStageDisplay {...this.props} steps={this.getGameSteps()} activeStep={this.getCurrentGameStepIndex()} />\n                                        <GamePortalContainer {...this.props} />\n                                    </div>\n                                );\n                            }\n                        case ROOM_STATE.INVALID:\n                        default:\n                            return <Redirect to='/' />\n                    }\n                })()}\n            </div>\n        );\n    }\n}\n\nTuttiContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TuttiContainer);","export default (theme) => ({\n    root: {\n        paddingTop: 10,\n        minHeight: '95vh',\n        backgroundColor: theme.palette.grey['50']\n    }\n});","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './VolumeSliderStyles';\n\nclass VolumeSlider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            volume: 100\n        };\n        this.handleChange = this.handleChange.bind(this);\n        Tone.Master.volume.value = 10;\n    }\n\n    handleChange(event, newValue) {\n        this.setState({ volume: newValue });\n\n        // Map Slider values [0, 100] to decibel range [-10, 10]\n        let newValueDecibels = newValue / 5 - 10;\n        Tone.Master.volume.value = newValueDecibels;\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <Grid container\n                    direction='row'\n                    justify='center'\n                    alignItems='center'>\n                    <Grid item className={classes.volumeIcon}>\n                        <VolumeDown />\n                    </Grid>\n                    <Grid item xs className={classes.sliderGrid}>\n                        <Slider className={classes.slider} value={this.state.volume} onChange={this.handleChange} />\n                    </Grid>\n                    <Grid item className={classes.volumeIcon}>\n                        <VolumeUp />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nVolumeSlider.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(VolumeSlider);","export default (theme) => ({\n    root: {\n        width: 200\n    },\n    slider: {\n        color: theme.palette.primary.contrastText\n    },\n    sliderGrid: {\n        height: '28px'\n    },\n    volumeIcon: {\n        height: '24px',\n        padding: '0 8px 0 15px'\n    }\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport styles from './RecordingSpinIconStyles';\n\nclass RecordingSpinIcon extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const { classes, theme } = this.props;\n\n        return(\n            <div className={classes.root}>\n                <FiberManualRecordIcon fontSize='small' style={{ fill: theme.palette.error.main }} />\n                <CircularProgress size={20} className={classes.progress} />\n            </div>\n        )\n    }\n}\n\nRecordingSpinIcon.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withTheme(withStyles(styles)(RecordingSpinIcon));","export default (theme) => ({\n    root: {\n        paddingRight: 5\n    },\n    progress: {\n        position: 'absolute',\n        top: 12,\n        left: 16,\n        zIndex: 1,\n        color: theme.palette.error.main\n    }\n});","function UserReducer(state = { \n    playerName: null, \n    messages: [], \n    isRecording: false \n}, action) {\n    switch (action.type) {\n        case 'ADD_USER':\n            return {\n                ...state,\n                playerName : action.playerName\n            };\n        case 'RECEIVE_CHAT_MESSAGE':\n            return {\n                ...state,\n                messages: [...state.messages, {\n                    senderName: action.playerName,\n                    message: action.message,\n                    id: action.playerName == state.playerName ? 0 : action.playerName\n                }]\n            };\n        case 'UPDATED_RECORDING_STATE':\n            return {\n                ...state,\n                isRecording : action.isRecording\n            };\n        default:\n            return state;\n        }\n}\n\nexport default UserReducer;","import { ROOM_STATE } from '../utils/stateEnums';\n\nfunction RoomReducer(state = { \n    roomCode        : null,\n    roomState       : ROOM_STATE.EMPTY,\n    bpm             : 120,\n    numBars         : 4,\n    numLoops        : 3,\n    lastUpdatedField: 'bpm',\n    users           : {}\n}, action) {\n    switch (action.type) {\n        case 'SET_INVALID_ROOM':\n            return {\n                ...state,\n                roomCode: action.roomCode,\n                roomState: ROOM_STATE.INVALID\n            };\n        case 'LOAD_ROOM':\n            return {\n                ...state,\n                roomCode: action.roomCode,\n                roomState: ROOM_STATE.VALID,\n                bpm: action.bpm,\n                numBars: action.numBars,\n                numLoops: action.numLoops,\n                users: action.users\n            };\n        case 'EDIT_ROOM_BPM':\n            return {\n                ...state,\n                lastUpdatedField: 'bpm',\n                bpm: action.bpm\n            };\n        case 'ROOM_BPM_UPDATED':\n            return {\n                ...state,\n                bpm: action.bpm\n            };\n        case 'EDIT_ROOM_NUM_BARS':\n            return {\n                ...state,\n                lastUpdatedField: 'numBars',\n                numBars: action.numBars\n            };\n        case 'ROOM_NUMBARS_UPDATED':\n            return {\n                ...state,\n                numBars: action.numBars\n            };\n        case 'EDIT_ROOM_NUM_LOOPS':\n            return {\n                ...state,\n                lastUpdatedField: 'numLoops',\n                numLoops: action.numLoops\n            };\n        case 'ROOM_NUMLOOPS_UPDATED':\n            return {\n                ...state,\n                numLoops: action.numLoops\n            };\n        case 'CHAT_MESSAGE_SENT':\n            return {\n                ...state,\n                lastUpdatedField: 'chat'\n            };\n        case 'ROOM_PLAYERS_UPDATED':\n            return {\n                ...state,\n                users: { ...action.users }\n            };\n        case 'RECEIVED_AUDIO':\n            var blob = new Blob([action.audioData], { type: 'audio/webm;codecs=opus' });\n            const audioUrl = URL.createObjectURL(blob);\n            return {\n                ...state,\n                users: { \n                    ...state.users, \n                    [action.playerName]: {\n                        ...state.users[action.playerName],\n                        audioUrl\n                    } \n                }\n            };\n        case 'RECEIVED_LOOPED_AUDIO':\n            var blob = new Blob([action.audioData], {type: 'audio/webm;codecs=opus' });\n            const loopUrl = URL.createObjectURL(blob);\n            return {\n                ...state,\n                users: { \n                    ...state.users, \n                    [action.playerName]: {\n                        ...state.users[action.playerName],\n                        loopUrl\n                    } \n                }\n            };\n        case 'PLAYER_UPDATED_RECORDING_STATE':\n            return {\n                ...state,\n                users: { \n                    ...state.users, \n                    [action.playerName]: {\n                        ...state.users[action.playerName],\n                        isRecording: action.isRecording\n                    } \n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default RoomReducer;","import GameModel from '../utils/GameModel';\n\nfunction GameReducer(state = { \n    stage: GameModel.Progression[0],\n    baselinePlayer: null\n}, action) {\n    switch (action.type) {\n        case 'ADVANCE_NEXT_STAGE':\n            return {\n                ...state,\n                stage: GameModel.NextStage(state.stage)\n            };\n        case 'SET_BASELINE_PLAYER':\n            return {\n                ...state,\n                baselinePlayer: {\n                    playerName: action.user.playerName\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default GameReducer;","import { combineReducers } from 'redux';\n\nimport UserReducer from './user';\nimport RoomReducer from './room';\nimport GameReducer from './GameReducer';\n\nconst rootReducer = combineReducers({ user: UserReducer, room: RoomReducer, game: GameReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { createBrowserHistory } from 'history';\n\n// import the root reducer\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers/index';\n\n// Setup socket.io store\nimport createSocketIoMiddleware from 'redux-socket.io';\nimport io from 'socket.io-client';\nconst socket = io('/');\nconst socketIoMiddleware = createSocketIoMiddleware(socket, 'socket/');\n\nlet store = createStore(rootReducer, applyMiddleware(thunk, socketIoMiddleware));\n\nif (module.hot) {\n    module.hot.accept('./reducers/',() => {\n        const nextRootReducer = require('./reducers/index').default;\n        store.replaceReducer(nextRootReducer);\n    });\n}\n\nexport const history = createBrowserHistory();\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\n// Our own components\nimport { App } from './components/index';\n\n// Register service worker\nimport './index.css'; // Our own main stylesheet\n\nimport store from './store';\n\nconst router = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(router, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/woodblock.3bc269da.wav\";"],"sourceRoot":""}